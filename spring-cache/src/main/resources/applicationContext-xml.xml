<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        http://www.springframework.org/schema/cache
                        http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!-- the service we want to make cacheable -->
    <bean id="bookService" class="com.ariclee.cache.xml.XmlBookService"/>

    <bean id="customKeyGenerator" class="com.ariclee.cache.xml.CustomKeyGenerator"/>

    <!-- cache definitions -->
    <cache:advice id="cacheAdvice" cache-manager="cacheManager">

        <cache:caching method="saveAndAddAllCacheMapping" cache="books">
            <cache:cache-put key="#book.id"/>
            <cache:cache-put key="#book.name"/>
        </cache:caching>

        <cache:caching cache="books">
            <!--
            读取缓存：
            应用到读取数据的方法上，即可缓存的方法，如查找方法，
            先从缓存中读取，如果没有再调用方法获取数据，
            然后把数据添加到缓存中
            -->
            <cache:cacheable method="findBook" key="#id"/>

            <!--
            更新缓存：
            应用到写数据的方法上，如新增/修改方法
            调用方法时会自动把相应的数据放入缓存
            -->
            <cache:cache-put method="saveBook" key="#book.id"/>

            <!--
            删除单个缓存：
            应用到移除数据的方法上，如删除方法
            调用方法时会从缓存中移除相应的数据
            -->
            <cache:cache-evict method="delete" key="#id"/>

            <!-- 清空缓存：同上，注意属性 all-entries 默认为 false -->
            <cache:cache-evict method="deleteAll" all-entries="true"/>

            <cache:cacheable method="findBookByName" key="#name"/>

            <!-- 不缓存结果集中带有 default 的 -->
            <!--<cache:cacheable method="findBookByName" unless="#result.name.contains('default')" key="#name"/>-->

            <!-- 只缓存参数名中包含 Java 的 -->
            <!--<cache:cacheable method="findBookByName"  condition="#name.contains('Java')" key="#name"/>-->

            <!--<cache:cache-put method="saveAndAddAllCacheMapping" key="#book.id"/>-->
            <!--<cache:cache-put method="saveAndAddAllCacheMapping" key="#book.name"/>-->

            <cache:cache-put method="keyGeneratorTest" key-generator="customKeyGenerator"/>
        </cache:caching>
    </cache:advice>

    <aop:config>
        <aop:advisor advice-ref="cacheAdvice" pointcut="execution(* com.ariclee.cache.xml.XmlBookService.*(..))"/>
    </aop:config>

     <!--注册缓存管理（JVM）-->
    <!--<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">-->
        <!--<property name="caches">-->
            <!--<set>-->
                <!--<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="default"/>-->
                <!--<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" p:name="books"/>-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="cacheManager" class="org.springframework.cache.concurrent.ConcurrentMapCacheManager">
        <constructor-arg value="books"/>
    </bean>

    <!-- 注册缓存管理（Redis） -->
    <!--<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<property name="hostName" value="172.17.1.32"/>-->
        <!--<property name="port" value="6379"/>-->
        <!--<property name="password" value="2940184"/>-->
        <!--<property name="timeout" value="2000"/>-->
        <!--<property name="database" value="1"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 如何注入泛型类？ &ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="genericToStringSerializer" class="org.springframework.data.redis.serializer.GenericToStringSerializer">&ndash;&gt;-->
        <!--&lt;!&ndash;<constructor-arg type="java.lang.Object" ref="obj"/>&ndash;&gt;-->
    <!--&lt;!&ndash;</bean>&ndash;&gt;-->

    <!--&lt;!&ndash; 声明 RedisTemplate 类&ndash;&gt;-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate ">-->
        <!--<property name="connectionFactory" ref="connectionFactory" />-->
        <!--&lt;!&ndash;<property name="defaultSerializer" ref="genericToStringSerializer"/>&ndash;&gt;-->
    <!--</bean>-->

    <!--&lt;!&ndash; 声明缓存管理类 &ndash;&gt;-->
    <!--&lt;!&ndash; 并与 redisTemplate 和缓存名字关联 &ndash;&gt;-->
    <!--<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">-->
        <!--<constructor-arg ref="redisTemplate" />-->
        <!--&lt;!&ndash;-->
        <!--当需要设置缓存的过期时间时-->
        <!--不能在构造器中指定缓存名字-->
        <!--否则过期时间无法生效-->
        <!--&ndash;&gt;-->
        <!--&lt;!&ndash;<constructor-arg value="books" />&ndash;&gt;-->
        <!--<property name="defaultExpiration" value="20"/>-->
        <!--<property name="expires">-->
            <!--<map>-->
                <!--<entry key="books" value="10000"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--<property name="usePrefix" value="true"/>-->
    <!--</bean>-->


    <!-- MVC 扫包配置 -->
    <mvc:annotation-driven/>

    <context:component-scan base-package="com.ariclee.cache.xml" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

</beans>